[{"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/index.js":"1","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/App.js":"2","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Containers/ChatRoomContainer.js":"3","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/Register.js":"4","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/ChatContent.js":"5","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/MemberList.js":"6","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/ChatBox.js":"7"},{"size":311,"mtime":1695040685770,"results":"8","hashOfConfig":"9"},{"size":161,"mtime":1695039619908,"results":"10","hashOfConfig":"9"},{"size":4223,"mtime":1695039329093,"results":"11","hashOfConfig":"9"},{"size":510,"mtime":1695050967707,"results":"12","hashOfConfig":"9"},{"size":2286,"mtime":1695051906772,"results":"13","hashOfConfig":"9"},{"size":713,"mtime":1695052980068,"results":"14","hashOfConfig":"9"},{"size":846,"mtime":1695049872076,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"5chwzz",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/index.js",[],[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/App.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Containers/ChatRoomContainer.js",["39","40","41"],[],"import React, { useState } from \"react\";\nimport { over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\nimport MemberList from \"../Components/MemberList\";\nimport ChatContent from \"../Components/ChatContent\";\n\nvar stompClient = null;\n\nconst ChatRoomContainer = () => {\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\",\n  });\n\n  const handleValue = (e) => {\n    const {value, name} = e.target;\n    setUserData({ ...userData, [name]:value });\n  };\n\n//   const handleMessage = (e) => {\n//     setUserData[{ ...userData, message: e.target.value }];\n//   };\n\n  const registerUser = () => {\n    let Sock = new SockJS(\"http://localhost:8080/ws\");\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, connected: true });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\n      \"/user/\" + userData.username + \"/private\",\n      onPrivateMessageReceived\n    );\n    userJoin();\n  };\n\n  const userJoin = () => {\n            let chatMessage = {\n                senderName: userData.username,\n                status: \"JOIN\"\n            };\n            stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        }\n\n        const onPublicMessageReceived = (payload) => {\n          let payLoadData = JSON.parse(payload.body);\n          console.log(\"Received public message:\", payLoadData);\n          switch (payLoadData.status) {\n            case \"JOIN\":\n              if (!privateChats.get(payLoadData.senderName)) {\n                privateChats.set(payLoadData.senderName, []);\n                setPrivateChats(new Map(privateChats));\n              }\n              break;\n            case \"MESSAGE\":\n              console.log(\"Received MESSAGE:\", payLoadData.message);\n              publicChats.push(payLoadData);\n              setPublicChats([...publicChats]);\n              break;\n          }\n        };\n        \n  const onPrivateMessageReceived = (payload) => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      console.log('its HERE' + payLoadData)\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const sendPublicMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n        console.log(userData.message)\n    }\n  }\n\n  const sendPrivateMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            receiverName: tab,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        if(userData.username !==tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n        }\n        stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  return (\n    <div className=\"chatroom-container\">\n      {userData.connected ? (\n      <ChatBox tab={tab} userData={userData} publicChats={publicChats} privateChats={privateChats}\n      handleValue={handleValue} sendPublicMessage={sendPublicMessage} sendPrivateMessage={sendPrivateMessage} setTab={setTab}/>\n      ) : (\n      <Register userData={userData} handleValue={handleValue} registerUser={registerUser}/>\n      )}\n    </div>\n  )\n}\n\nexport default ChatRoomContainer;","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/Register.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/ChatContent.js",["42"],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/MemberList.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/src/Components/ChatBox.js",[],[],{"ruleId":"43","severity":1,"message":"44","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":18},{"ruleId":"43","severity":1,"message":"47","line":7,"column":8,"nodeType":"45","messageId":"46","endLine":7,"endColumn":19},{"ruleId":"48","severity":1,"message":"49","line":58,"column":11,"nodeType":"50","messageId":"51","endLine":70,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":37,"column":11,"nodeType":"54","messageId":"55","endLine":37,"endColumn":103},"no-unused-vars","'MemberList' is defined but never used.","Identifier","unusedVar","'ChatContent' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps"]