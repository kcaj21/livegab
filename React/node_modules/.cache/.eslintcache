[{"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/index.js":"1","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/App.js":"2","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Containers/ChatRoomContainer.js":"3","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/Register.js":"4","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatContent.js":"5","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatBox.js":"6","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/index.js":"7","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/App.js":"8","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js":"9","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatBox.js":"10","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/Register.js":"11","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatContent.js":"12","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MessageInput.js":"13","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/SideBarToggle.js":"14","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/DesktopSideBar.js":"15","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MobileSideBar.js":"16"},{"size":311,"mtime":1695040685770,"results":"17","hashOfConfig":"18"},{"size":161,"mtime":1695039619908,"results":"19","hashOfConfig":"18"},{"size":4223,"mtime":1695039329093,"results":"20","hashOfConfig":"18"},{"size":510,"mtime":1695050967707,"results":"21","hashOfConfig":"18"},{"size":2286,"mtime":1695051906772,"results":"22","hashOfConfig":"18"},{"size":846,"mtime":1695049872076,"results":"23","hashOfConfig":"18"},{"size":311,"mtime":1698338780632,"results":"24","hashOfConfig":"25"},{"size":161,"mtime":1697976353804,"results":"26","hashOfConfig":"25"},{"size":5202,"mtime":1700680710628,"results":"27","hashOfConfig":"25"},{"size":3006,"mtime":1698758877433,"results":"28","hashOfConfig":"25"},{"size":987,"mtime":1698240649095,"results":"29","hashOfConfig":"25"},{"size":1669,"mtime":1698225852225,"results":"30","hashOfConfig":"25"},{"size":1330,"mtime":1698758778184,"results":"31","hashOfConfig":"25"},{"size":672,"mtime":1698240508159,"results":"32","hashOfConfig":"25"},{"size":1798,"mtime":1698241210855,"results":"33","hashOfConfig":"25"},{"size":1927,"mtime":1698226119470,"results":"34","hashOfConfig":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u8r7uj",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"14uzxg3",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/index.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/App.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Containers/ChatRoomContainer.js",["86","87","88"],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/Register.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatContent.js",["89"],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatBox.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/index.js",[],[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/App.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js",["90"],[],"import React, { useState } from \"react\";\nimport { over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\n\nlet stompClient = null;\n\nconst ChatRoomContainer = () => {\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\",\n  });\n\n  const handleValue = (e) => {\n    const {value, name} = e.target;\n    setUserData({ ...userData, [name]:value });\n  };\n\n  // const EC2 = process.env.IP\n\n  const registerUser = () => {\n    // console.log({EC2})\n    if (userData.username.length > 0) {\n\n    console.log('Connecting to server...')\n    let Sock = new SockJS(`http://34.242.207.195:8080/ws`);\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n\n    }\n\n    else {alert('please enter a username')}\n  };\n\n  const onConnected = () => {\n    fetch(`http://34.242.207.195:8080/allMessages`)\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n    data.forEach(message => {\n      if (message.status === 'MESSAGE'){\n        publicChats.push(message);\n        setPublicChats([...publicChats]);\n      }\n    });\n    })\n    .catch(error => {\n      console.error(error);\n      // alert('everything is broken.');\n    });\n    setUserData({ ...userData, connected: true });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\n      \"/user/\" + userData.username + \"/private\",\n      onPrivateMessageReceived\n    );\n    userJoin();\n  };\n\n  const userJoin = () => {\n            let chatMessage = {\n                senderName: userData.username,\n                status: \"JOIN\"\n            };\n            stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        }\n\n        const onPublicMessageReceived = (payload) => {\n          let payLoadData = JSON.parse(payload.body);\n          console.log(\"Received public message:\", payLoadData);\n          switch (payLoadData.status) {\n            case \"JOIN\":\n              if (!privateChats.get(payLoadData.senderName)) {\n                privateChats.set(payLoadData.senderName, []);\n                setPrivateChats(new Map(privateChats));\n                sendUserNames()\n              }\n              break;\n            case \"MESSAGE\":\n              console.log(\"Received MESSAGE:\", payLoadData.message);\n              publicChats.push(payLoadData);\n              setPublicChats([...publicChats]);\n              break;\n          }\n        };\n        \n  const onPrivateMessageReceived = (payload) => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const sendUserNames = () => {\n    // this is called after onPublicMessageReceived so all users will send their userNames out when a new user joins so that the new user can append them to their membersList in their prvateChats state\n    if(stompClient) {\n      let chatMessage = {\n          senderName: userData.username,\n          status: \"JOIN\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  }}\n\n  const sendPublicMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const sendPrivateMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            receiverName: tab,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        if(userData.username !==tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n        }\n        stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  return (\n    <div className=\"chatbox-container bg-primary\">\n\n      {userData.connected ? (\n      <ChatBox \n      tab={tab} \n      userData={userData} \n      publicChats={publicChats} \n      privateChats={privateChats}\n      handleValue={handleValue} \n      sendPublicMessage={sendPublicMessage} \n      sendPrivateMessage={sendPrivateMessage} \n      setTab={setTab} onConnected={onConnected}/>\n\n      ) : (\n\n      <div className=\"flex flex-col justify-center h-screen\">\n        <Register \n        userData={userData} \n        handleValue={handleValue} \n        registerUser={registerUser} \n        />\n      </div>\n      )}\n    </div>\n  )\n}\n\nexport default ChatRoomContainer;","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatBox.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/Register.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatContent.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MessageInput.js",["91","92","93","94"],[],"import React, {useRef, useState} from 'react'\n\nconst MessageInput = ({tab, userData, handleValue, sendPublicMessage, sendPrivateMessage}) => {\n\n      const handleKeyPress = (event) => {\n        if (event.keyCode === 13 || event.which === 13 && tab === \"CHATROOM\") {\n          sendPublicMessage()\n        } else if (event.keyCode === 13 || event.which === 13) {\n          sendPrivateMessage()\n        }\n        // console.log(messageLength.value().length)\n      }\n\n  // const messageLength = useRef(0)\n\n  return (\n    <div className=\"send-message h-full flex flex-col-2 border bg-[#424549] border-[#424549] rounded-lg hover:border-[#3d4059]\">\n    <input\n      // ref={messageLength}\n      minLength={1}\n      name=\"message\"\n      type=\"text\"\n      required\n      className=\"input-message border-[#424549] rounded pl-2 w-[80%] bg-[#424549] \"\n      placeholder={\n        tab === \"CHATROOM\"\n          ? \"Type a public message...\"\n          : `Type a private message to ${tab}`\n      }\n      value={userData.message}\n      onChange={handleValue}\n      onKeyPress={handleKeyPress}\n    />\n    <button\n      type=\"button\"\n      className=\"send-button w-[20%]  text-white\"\n      onClick={\n        tab === \"CHATROOM\" ? sendPublicMessage : sendPrivateMessage\n      }\n    >\n      Send\n    </button>\n  </div>\n  )\n}\n\nexport default MessageInput","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/SideBarToggle.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/DesktopSideBar.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MobileSideBar.js",[],[],{"ruleId":"95","severity":1,"message":"96","line":6,"column":8,"nodeType":"97","messageId":"98","endLine":6,"endColumn":18},{"ruleId":"95","severity":1,"message":"99","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":58,"column":11,"nodeType":"102","messageId":"103","endLine":70,"endColumn":12},{"ruleId":"104","severity":1,"message":"105","line":37,"column":11,"nodeType":"106","messageId":"107","endLine":37,"endColumn":103},{"ruleId":"100","severity":1,"message":"101","line":78,"column":11,"nodeType":"102","messageId":"103","endLine":91,"endColumn":12},{"ruleId":"95","severity":1,"message":"108","line":1,"column":16,"nodeType":"97","messageId":"98","endLine":1,"endColumn":22},{"ruleId":"95","severity":1,"message":"109","line":1,"column":24,"nodeType":"97","messageId":"98","endLine":1,"endColumn":32},{"ruleId":"110","severity":1,"message":"111","line":6,"column":34,"nodeType":"112","messageId":"113","endLine":6,"endColumn":36},{"ruleId":"110","severity":1,"message":"111","line":6,"column":56,"nodeType":"112","messageId":"113","endLine":6,"endColumn":58},"no-unused-vars","'MemberList' is defined but never used.","Identifier","unusedVar","'ChatContent' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useRef' is defined but never used.","'useState' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator"]