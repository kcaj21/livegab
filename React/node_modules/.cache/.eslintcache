[{"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/index.js":"1","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/App.js":"2","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Containers/ChatRoomContainer.js":"3","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/Register.js":"4","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/MemberList.js":"5","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatContent.js":"6","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatBox.js":"7","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/index.js":"8","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/App.js":"9","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js":"10","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatBox.js":"11","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/Register.js":"12","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatContent.js":"13","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MemberList.js":"14","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MessageInput.js":"15"},{"size":311,"mtime":1695040685770,"results":"16","hashOfConfig":"17"},{"size":161,"mtime":1695039619908,"results":"18","hashOfConfig":"17"},{"size":4223,"mtime":1695039329093,"results":"19","hashOfConfig":"17"},{"size":510,"mtime":1695050967707,"results":"20","hashOfConfig":"17"},{"size":713,"mtime":1695052980068,"results":"21","hashOfConfig":"17"},{"size":2286,"mtime":1695051906772,"results":"22","hashOfConfig":"17"},{"size":846,"mtime":1695049872076,"results":"23","hashOfConfig":"17"},{"size":311,"mtime":1695040685770,"results":"24","hashOfConfig":"25"},{"size":161,"mtime":1695039619908,"results":"26","hashOfConfig":"25"},{"size":4881,"mtime":1697838846880,"results":"27","hashOfConfig":"25"},{"size":1520,"mtime":1697893113780,"results":"28","hashOfConfig":"25"},{"size":682,"mtime":1697842916056,"results":"29","hashOfConfig":"25"},{"size":1891,"mtime":1697888379929,"results":"30","hashOfConfig":"25"},{"size":1011,"mtime":1697892599376,"results":"31","hashOfConfig":"25"},{"size":1170,"mtime":1697887929524,"results":"32","hashOfConfig":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u8r7uj",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"14uzxg3",{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/index.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/App.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Containers/ChatRoomContainer.js",["80","81","82"],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/Register.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/MemberList.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatContent.js",["83"],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/React/src/Components/ChatBox.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/index.js",[],[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/App.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js",["84","85","86"],[],"import React, { useEffect, useState } from \"react\";\nimport { Stomp, over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\n\nvar stompClient = null;\n\nconst ChatRoomContainer = () => {\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\",\n  });\n\n  const handleValue = (e) => {\n    const {value, name} = e.target;\n    setUserData({ ...userData, [name]:value });\n  };\n\n  const registerUser = () => {\n    let Sock = new SockJS(\"http://localhost:8080/ws\");\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    fetch(\"http://localhost:8080/allMessages/\")\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n    console.log(data);\n    data.forEach(message => {\n      if (message.message != null){\n        publicChats.push(message);\n        setPublicChats([...publicChats]);\n      }\n    });\n    })\n    .catch(error => {\n      console.error(error);\n      // alert('everything is broken.');\n    });\n    setUserData({ ...userData, connected: true });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\n      \"/user/\" + userData.username + \"/private\",\n      onPrivateMessageReceived\n    );\n    userJoin();\n  };\n\n  const userJoin = () => {\n            let chatMessage = {\n                senderName: userData.username,\n                status: \"JOIN\"\n            };\n            stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        }\n\n        const onPublicMessageReceived = (payload) => {\n          let payLoadData = JSON.parse(payload.body);\n          console.log(\"Received public message:\", payLoadData);\n          switch (payLoadData.status) {\n            case \"JOIN\":\n              if (!privateChats.get(payLoadData.senderName)) {\n                privateChats.set(payLoadData.senderName, []);\n                setPrivateChats(new Map(privateChats));\n                sendUserNames()\n              }\n              break;\n            case \"MESSAGE\":\n              console.log(\"Received MESSAGE:\", payLoadData.message);\n              publicChats.push(payLoadData);\n              setPublicChats([...publicChats]);\n              break;\n          }\n        };\n        \n  const onPrivateMessageReceived = (payload) => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const sendUserNames = () => {\n    // this is called after onPublicMessageReceived so all users will send their userNames out when a new user joins so that the new user can append them to their membersList in their prvateChats state\n    if(stompClient) {\n      let chatMessage = {\n          senderName: userData.username,\n          status: \"JOIN\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  }}\n\n  const sendPublicMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n        console.log(userData.message)\n    }\n  }\n\n  const sendPrivateMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            receiverName: tab,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        if(userData.username !==tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n        }\n        stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  return (\n    <div className=\"chatroom-container bg-primary\">\n      {userData.connected ? (\n      <ChatBox tab={tab} userData={userData} publicChats={publicChats} privateChats={privateChats}\n      handleValue={handleValue} sendPublicMessage={sendPublicMessage} sendPrivateMessage={sendPrivateMessage} setTab={setTab}/>\n      ) : (\n      <Register userData={userData} handleValue={handleValue} registerUser={registerUser}/>\n      )}\n    </div>\n  )\n}\n\nexport default ChatRoomContainer;","/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatBox.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/Register.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/ChatContent.js",["87"],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MemberList.js",[],[],"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Components/MessageInput.js",["88","89"],[],{"ruleId":"90","severity":1,"message":"91","line":6,"column":8,"nodeType":"92","messageId":"93","endLine":6,"endColumn":18},{"ruleId":"90","severity":1,"message":"94","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":19},{"ruleId":"95","severity":1,"message":"96","line":58,"column":11,"nodeType":"97","messageId":"98","endLine":70,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":37,"column":11,"nodeType":"101","messageId":"102","endLine":37,"endColumn":103},{"ruleId":"90","severity":1,"message":"103","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"104","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":15},{"ruleId":"95","severity":1,"message":"96","line":69,"column":11,"nodeType":"97","messageId":"98","endLine":82,"endColumn":12},{"ruleId":"90","severity":1,"message":"105","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":11,"column":34,"nodeType":"108","messageId":"109","endLine":11,"endColumn":36},{"ruleId":"106","severity":1,"message":"107","line":11,"column":56,"nodeType":"108","messageId":"109","endLine":11,"endColumn":58},"no-unused-vars","'MemberList' is defined but never used.","Identifier","unusedVar","'ChatContent' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useEffect' is defined but never used.","'Stomp' is defined but never used.","'MessageInput' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator"]