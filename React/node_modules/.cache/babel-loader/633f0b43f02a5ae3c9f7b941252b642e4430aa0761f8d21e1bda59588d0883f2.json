{"ast":null,"code":"var _jsxFileName = \"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\nconst ChatRoomContainer = () => {\n  _s();\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\"\n  });\n  const handleValue = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setUserData({\n      ...userData,\n      [name]: value\n    });\n  };\n\n  // const EC2 = process.env.IP\n\n  const registerUser = () => {\n    console.log({\n      EC2\n    });\n    if (userData.username.length > 0) {\n      console.log('Connecting to server...');\n      let Sock = new SockJS(`http://${EC2}:8080/ws`);\n      stompClient = over(Sock);\n      stompClient.connect({}, onConnected, onError);\n    } else {\n      alert('please enter a username');\n    }\n  };\n  const onConnected = () => {\n    fetch(`http://${EC2}:8080/allMessages`).then(response => {\n      return response.json();\n    }).then(data => {\n      data.forEach(message => {\n        if (message.status === 'MESSAGE') {\n          publicChats.push(message);\n          setPublicChats([...publicChats]);\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n      // alert('everything is broken.');\n    });\n\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\"/user/\" + userData.username + \"/private\", onPrivateMessageReceived);\n    userJoin();\n  };\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onPublicMessageReceived = payload => {\n    let payLoadData = JSON.parse(payload.body);\n    console.log(\"Received public message:\", payLoadData);\n    switch (payLoadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payLoadData.senderName)) {\n          privateChats.set(payLoadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n          sendUserNames();\n        }\n        break;\n      case \"MESSAGE\":\n        console.log(\"Received MESSAGE:\", payLoadData.message);\n        publicChats.push(payLoadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessageReceived = payload => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  const sendUserNames = () => {\n    // this is called after onPublicMessageReceived so all users will send their userNames out when a new user joins so that the new user can append them to their membersList in their prvateChats state\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        status: \"JOIN\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n    }\n  };\n  const sendPublicMessage = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const sendPrivateMessage = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox-container bg-primary\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(ChatBox, {\n      tab: tab,\n      userData: userData,\n      publicChats: publicChats,\n      privateChats: privateChats,\n      handleValue: handleValue,\n      sendPublicMessage: sendPublicMessage,\n      sendPrivateMessage: sendPrivateMessage,\n      setTab: setTab,\n      onConnected: onConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col justify-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(Register, {\n        userData: userData,\n        handleValue: handleValue,\n        registerUser: registerUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoomContainer, \"C1ic8iqrOrH9ku0ULvXD86uxlt0=\");\n_c = ChatRoomContainer;\nexport default ChatRoomContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatRoomContainer\");","map":{"version":3,"names":["React","useState","over","SockJS","Register","ChatBox","jsxDEV","_jsxDEV","stompClient","ChatRoomContainer","_s","publicChats","setPublicChats","privateChats","setPrivateChats","Map","tab","setTab","userData","setUserData","username","receiverName","connected","message","handleValue","e","value","name","target","registerUser","console","log","EC2","length","Sock","connect","onConnected","onError","alert","fetch","then","response","json","data","forEach","status","push","catch","error","subscribe","onPublicMessageReceived","onPrivateMessageReceived","userJoin","chatMessage","senderName","send","JSON","stringify","payload","payLoadData","parse","body","get","set","sendUserNames","list","sendPublicMessage","sendPrivateMessage","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\n\nlet stompClient = null;\n\nconst ChatRoomContainer = () => {\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\",\n  });\n\n  const handleValue = (e) => {\n    const {value, name} = e.target;\n    setUserData({ ...userData, [name]:value });\n  };\n\n  // const EC2 = process.env.IP\n\n  const registerUser = () => {\n    console.log({EC2})\n    if (userData.username.length > 0) {\n\n    console.log('Connecting to server...')\n    let Sock = new SockJS(`http://${EC2}:8080/ws`);\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n\n    }\n\n    else {alert('please enter a username')}\n  };\n\n  const onConnected = () => {\n    fetch(`http://${EC2}:8080/allMessages`)\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n    data.forEach(message => {\n      if (message.status === 'MESSAGE'){\n        publicChats.push(message);\n        setPublicChats([...publicChats]);\n      }\n    });\n    })\n    .catch(error => {\n      console.error(error);\n      // alert('everything is broken.');\n    });\n    setUserData({ ...userData, connected: true });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\n      \"/user/\" + userData.username + \"/private\",\n      onPrivateMessageReceived\n    );\n    userJoin();\n  };\n\n  const userJoin = () => {\n            let chatMessage = {\n                senderName: userData.username,\n                status: \"JOIN\"\n            };\n            stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        }\n\n        const onPublicMessageReceived = (payload) => {\n          let payLoadData = JSON.parse(payload.body);\n          console.log(\"Received public message:\", payLoadData);\n          switch (payLoadData.status) {\n            case \"JOIN\":\n              if (!privateChats.get(payLoadData.senderName)) {\n                privateChats.set(payLoadData.senderName, []);\n                setPrivateChats(new Map(privateChats));\n                sendUserNames()\n              }\n              break;\n            case \"MESSAGE\":\n              console.log(\"Received MESSAGE:\", payLoadData.message);\n              publicChats.push(payLoadData);\n              setPublicChats([...publicChats]);\n              break;\n          }\n        };\n        \n  const onPrivateMessageReceived = (payload) => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const sendUserNames = () => {\n    // this is called after onPublicMessageReceived so all users will send their userNames out when a new user joins so that the new user can append them to their membersList in their prvateChats state\n    if(stompClient) {\n      let chatMessage = {\n          senderName: userData.username,\n          status: \"JOIN\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  }}\n\n  const sendPublicMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const sendPrivateMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            receiverName: tab,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        if(userData.username !==tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n        }\n        stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  return (\n    <div className=\"chatbox-container bg-primary\">\n\n      {userData.connected ? (\n      <ChatBox \n      tab={tab} \n      userData={userData} \n      publicChats={publicChats} \n      privateChats={privateChats}\n      handleValue={handleValue} \n      sendPublicMessage={sendPublicMessage} \n      sendPrivateMessage={sendPrivateMessage} \n      setTab={setTab} onConnected={onConnected}/>\n\n      ) : (\n\n      <div className=\"flex flex-col justify-center h-screen\">\n        <Register \n        userData={userData} \n        handleValue={handleValue} \n        registerUser={registerUser} \n        />\n      </div>\n      )}\n    </div>\n  )\n}\n\nexport default ChatRoomContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}