{"ast":null,"code":"var _jsxFileName = \"/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Stomp, over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\nconst ChatRoomContainer = () => {\n  _s();\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\"\n  });\n  const handleValue = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setUserData({\n      ...userData,\n      [name]: value\n    });\n  };\n  const registerUser = () => {\n    let Sock = new SockJS(\"http://localhost:8080/ws\");\n    http:\n    //192.168.0.42:3000/\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n    console.log('try connect');\n  };\n  const onConnected = () => {\n    fetch(\"http://localhost:8080/allMessages/\").then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      data.forEach(message => {\n        if (message.message != null) {\n          publicChats.push(message);\n          setPublicChats([...publicChats]);\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n      // alert('everything is broken.');\n    });\n\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\"/user/\" + userData.username + \"/private\", onPrivateMessageReceived);\n    userJoin();\n  };\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onPublicMessageReceived = payload => {\n    let payLoadData = JSON.parse(payload.body);\n    console.log(\"Received public message:\", payLoadData);\n    switch (payLoadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payLoadData.senderName)) {\n          privateChats.set(payLoadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n          sendUserNames();\n        }\n        break;\n      case \"MESSAGE\":\n        console.log(\"Received MESSAGE:\", payLoadData.message);\n        publicChats.push(payLoadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessageReceived = payload => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  const sendUserNames = () => {\n    // this is called after onPublicMessageReceived so all users will send their userNames out when a new user joins so that the new user can append them to their membersList in their prvateChats state\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        status: \"JOIN\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n    }\n  };\n  const sendPublicMessage = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n      console.log(userData.message);\n    }\n  };\n  const sendPrivateMessage = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container bg-primary\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(ChatBox, {\n      tab: tab,\n      userData: userData,\n      publicChats: publicChats,\n      privateChats: privateChats,\n      handleValue: handleValue,\n      sendPublicMessage: sendPublicMessage,\n      sendPrivateMessage: sendPrivateMessage,\n      setTab: setTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Register, {\n      userData: userData,\n      handleValue: handleValue,\n      registerUser: registerUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoomContainer, \"C1ic8iqrOrH9ku0ULvXD86uxlt0=\");\n_c = ChatRoomContainer;\nexport default ChatRoomContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatRoomContainer\");","map":{"version":3,"names":["React","useEffect","useState","Stomp","over","SockJS","Register","ChatBox","jsxDEV","_jsxDEV","stompClient","ChatRoomContainer","_s","publicChats","setPublicChats","privateChats","setPrivateChats","Map","tab","setTab","userData","setUserData","username","receiverName","connected","message","handleValue","e","value","name","target","registerUser","Sock","http","connect","onConnected","onError","console","log","fetch","then","response","json","data","forEach","push","catch","error","subscribe","onPublicMessageReceived","onPrivateMessageReceived","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payLoadData","parse","body","get","set","sendUserNames","list","sendPublicMessage","sendPrivateMessage","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alex/personal_projects/ChatRoom/chatclient/livegab/react/src/Containers/ChatRoomContainer.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Stomp, over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Register from \"../Components/Register\";\nimport ChatBox from \"../Components/ChatBox\";\n\nlet stompClient = null;\n\nconst ChatRoomContainer = () => {\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receiverName: \"\",\n    connected: false,\n    message: \"\",\n  });\n\n  const handleValue = (e) => {\n    const {value, name} = e.target;\n    setUserData({ ...userData, [name]:value });\n  };\n\n  const registerUser = () => {\n    let Sock = new SockJS(\"http://localhost:8080/ws\"); http://192.168.0.42:3000/\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n    console.log('try connect')\n  };\n\n  const onConnected = () => {\n    fetch(\"http://localhost:8080/allMessages/\")\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n    console.log(data);\n    data.forEach(message => {\n      if (message.message != null){\n        publicChats.push(message);\n        setPublicChats([...publicChats]);\n      }\n    });\n    })\n    .catch(error => {\n      console.error(error);\n      // alert('everything is broken.');\n    });\n    setUserData({ ...userData, connected: true });\n    stompClient.subscribe(\"/chatroom/public\", onPublicMessageReceived);\n    stompClient.subscribe(\n      \"/user/\" + userData.username + \"/private\",\n      onPrivateMessageReceived\n    );\n    userJoin();\n  };\n\n  const userJoin = () => {\n            let chatMessage = {\n                senderName: userData.username,\n                status: \"JOIN\"\n            };\n            stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        }\n\n        const onPublicMessageReceived = (payload) => {\n          let payLoadData = JSON.parse(payload.body);\n          console.log(\"Received public message:\", payLoadData);\n          switch (payLoadData.status) {\n            case \"JOIN\":\n              if (!privateChats.get(payLoadData.senderName)) {\n                privateChats.set(payLoadData.senderName, []);\n                setPrivateChats(new Map(privateChats));\n                sendUserNames()\n              }\n              break;\n            case \"MESSAGE\":\n              console.log(\"Received MESSAGE:\", payLoadData.message);\n              publicChats.push(payLoadData);\n              setPublicChats([...publicChats]);\n              break;\n          }\n        };\n        \n  const onPrivateMessageReceived = (payload) => {\n    let payLoadData = JSON.parse(payload.body);\n    if (privateChats.get(payLoadData.senderName)) {\n      privateChats.get(payLoadData.senderName).push(payLoadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payLoadData);\n      privateChats.set(payLoadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const sendUserNames = () => {\n    // this is called after onPublicMessageReceived so all users will send their userNames out when a new user joins so that the new user can append them to their membersList in their prvateChats state\n    if(stompClient) {\n      let chatMessage = {\n          senderName: userData.username,\n          status: \"JOIN\"\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  }}\n\n  const sendPublicMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n        console.log(userData.message)\n    }\n  }\n\n  const sendPrivateMessage = () => {\n    if(stompClient) {\n        let chatMessage = {\n            senderName: userData.username,\n            receiverName: tab,\n            message: userData.message,\n            status: \"MESSAGE\"\n        };\n        if(userData.username !==tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n        }\n        stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n        setUserData({...userData, \"message\": \"\"})\n    }\n  }\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  return (\n    <div className=\"chatroom-container bg-primary\">\n      {userData.connected ? (\n      <ChatBox tab={tab} userData={userData} publicChats={publicChats} privateChats={privateChats}\n      handleValue={handleValue} sendPublicMessage={sendPublicMessage} sendPrivateMessage={sendPrivateMessage} setTab={setTab}/>\n      ) : (\n      <Register userData={userData} handleValue={handleValue} registerUser={registerUser}/>\n      )}\n    </div>\n  )\n}\n\nexport default ChatRoomContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}